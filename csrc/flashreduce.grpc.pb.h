// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flashreduce.proto
#ifndef GRPC_flashreduce_2eproto__INCLUDED
#define GRPC_flashreduce_2eproto__INCLUDED

#include "flashreduce.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace flashreduce_proto {

class Session final {
 public:
  static constexpr char const* service_full_name() {
    return "flashreduce_proto.Session";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RdmaSession(::grpc::ClientContext* context, const ::flashreduce_proto::RdmaSessionRequest& request, ::flashreduce_proto::RdmaSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::RdmaSessionResponse>> AsyncRdmaSession(::grpc::ClientContext* context, const ::flashreduce_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::RdmaSessionResponse>>(AsyncRdmaSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::RdmaSessionResponse>> PrepareAsyncRdmaSession(::grpc::ClientContext* context, const ::flashreduce_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::RdmaSessionResponse>>(PrepareAsyncRdmaSessionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RdmaSession(::grpc::ClientContext* context, const ::flashreduce_proto::RdmaSessionRequest* request, ::flashreduce_proto::RdmaSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RdmaSession(::grpc::ClientContext* context, const ::flashreduce_proto::RdmaSessionRequest* request, ::flashreduce_proto::RdmaSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::RdmaSessionResponse>* AsyncRdmaSessionRaw(::grpc::ClientContext* context, const ::flashreduce_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::RdmaSessionResponse>* PrepareAsyncRdmaSessionRaw(::grpc::ClientContext* context, const ::flashreduce_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RdmaSession(::grpc::ClientContext* context, const ::flashreduce_proto::RdmaSessionRequest& request, ::flashreduce_proto::RdmaSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::RdmaSessionResponse>> AsyncRdmaSession(::grpc::ClientContext* context, const ::flashreduce_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::RdmaSessionResponse>>(AsyncRdmaSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::RdmaSessionResponse>> PrepareAsyncRdmaSession(::grpc::ClientContext* context, const ::flashreduce_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::RdmaSessionResponse>>(PrepareAsyncRdmaSessionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RdmaSession(::grpc::ClientContext* context, const ::flashreduce_proto::RdmaSessionRequest* request, ::flashreduce_proto::RdmaSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void RdmaSession(::grpc::ClientContext* context, const ::flashreduce_proto::RdmaSessionRequest* request, ::flashreduce_proto::RdmaSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::RdmaSessionResponse>* AsyncRdmaSessionRaw(::grpc::ClientContext* context, const ::flashreduce_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::RdmaSessionResponse>* PrepareAsyncRdmaSessionRaw(::grpc::ClientContext* context, const ::flashreduce_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RdmaSession_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RdmaSession(::grpc::ServerContext* context, const ::flashreduce_proto::RdmaSessionRequest* request, ::flashreduce_proto::RdmaSessionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RdmaSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RdmaSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RdmaSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RdmaSession(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::RdmaSessionRequest* /*request*/, ::flashreduce_proto::RdmaSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRdmaSession(::grpc::ServerContext* context, ::flashreduce_proto::RdmaSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::flashreduce_proto::RdmaSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RdmaSession<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RdmaSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RdmaSession() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::flashreduce_proto::RdmaSessionRequest, ::flashreduce_proto::RdmaSessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flashreduce_proto::RdmaSessionRequest* request, ::flashreduce_proto::RdmaSessionResponse* response) { return this->RdmaSession(context, request, response); }));}
    void SetMessageAllocatorFor_RdmaSession(
        ::grpc::MessageAllocator< ::flashreduce_proto::RdmaSessionRequest, ::flashreduce_proto::RdmaSessionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flashreduce_proto::RdmaSessionRequest, ::flashreduce_proto::RdmaSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RdmaSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RdmaSession(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::RdmaSessionRequest* /*request*/, ::flashreduce_proto::RdmaSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RdmaSession(
      ::grpc::CallbackServerContext* /*context*/, const ::flashreduce_proto::RdmaSessionRequest* /*request*/, ::flashreduce_proto::RdmaSessionResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RdmaSession<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RdmaSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RdmaSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RdmaSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RdmaSession(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::RdmaSessionRequest* /*request*/, ::flashreduce_proto::RdmaSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RdmaSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RdmaSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RdmaSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RdmaSession(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::RdmaSessionRequest* /*request*/, ::flashreduce_proto::RdmaSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRdmaSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RdmaSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RdmaSession() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RdmaSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_RdmaSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RdmaSession(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::RdmaSessionRequest* /*request*/, ::flashreduce_proto::RdmaSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RdmaSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RdmaSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RdmaSession() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::flashreduce_proto::RdmaSessionRequest, ::flashreduce_proto::RdmaSessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::flashreduce_proto::RdmaSessionRequest, ::flashreduce_proto::RdmaSessionResponse>* streamer) {
                       return this->StreamedRdmaSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RdmaSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RdmaSession(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::RdmaSessionRequest* /*request*/, ::flashreduce_proto::RdmaSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRdmaSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flashreduce_proto::RdmaSessionRequest,::flashreduce_proto::RdmaSessionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RdmaSession<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RdmaSession<Service > StreamedService;
};

class Sync final {
 public:
  static constexpr char const* service_full_name() {
    return "flashreduce_proto.Sync";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Barrier(::grpc::ClientContext* context, const ::flashreduce_proto::BarrierRequest& request, ::flashreduce_proto::BarrierResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::BarrierResponse>> AsyncBarrier(::grpc::ClientContext* context, const ::flashreduce_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::BarrierResponse>>(AsyncBarrierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::BarrierResponse>> PrepareAsyncBarrier(::grpc::ClientContext* context, const ::flashreduce_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::BarrierResponse>>(PrepareAsyncBarrierRaw(context, request, cq));
    }
    virtual ::grpc::Status Broadcast(::grpc::ClientContext* context, const ::flashreduce_proto::BroadcastRequest& request, ::flashreduce_proto::BroadcastResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::BroadcastResponse>> AsyncBroadcast(::grpc::ClientContext* context, const ::flashreduce_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::BroadcastResponse>>(AsyncBroadcastRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::BroadcastResponse>> PrepareAsyncBroadcast(::grpc::ClientContext* context, const ::flashreduce_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::BroadcastResponse>>(PrepareAsyncBroadcastRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Barrier(::grpc::ClientContext* context, const ::flashreduce_proto::BarrierRequest* request, ::flashreduce_proto::BarrierResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Barrier(::grpc::ClientContext* context, const ::flashreduce_proto::BarrierRequest* request, ::flashreduce_proto::BarrierResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Broadcast(::grpc::ClientContext* context, const ::flashreduce_proto::BroadcastRequest* request, ::flashreduce_proto::BroadcastResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Broadcast(::grpc::ClientContext* context, const ::flashreduce_proto::BroadcastRequest* request, ::flashreduce_proto::BroadcastResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::BarrierResponse>* AsyncBarrierRaw(::grpc::ClientContext* context, const ::flashreduce_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::BarrierResponse>* PrepareAsyncBarrierRaw(::grpc::ClientContext* context, const ::flashreduce_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::BroadcastResponse>* AsyncBroadcastRaw(::grpc::ClientContext* context, const ::flashreduce_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flashreduce_proto::BroadcastResponse>* PrepareAsyncBroadcastRaw(::grpc::ClientContext* context, const ::flashreduce_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Barrier(::grpc::ClientContext* context, const ::flashreduce_proto::BarrierRequest& request, ::flashreduce_proto::BarrierResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::BarrierResponse>> AsyncBarrier(::grpc::ClientContext* context, const ::flashreduce_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::BarrierResponse>>(AsyncBarrierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::BarrierResponse>> PrepareAsyncBarrier(::grpc::ClientContext* context, const ::flashreduce_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::BarrierResponse>>(PrepareAsyncBarrierRaw(context, request, cq));
    }
    ::grpc::Status Broadcast(::grpc::ClientContext* context, const ::flashreduce_proto::BroadcastRequest& request, ::flashreduce_proto::BroadcastResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::BroadcastResponse>> AsyncBroadcast(::grpc::ClientContext* context, const ::flashreduce_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::BroadcastResponse>>(AsyncBroadcastRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::BroadcastResponse>> PrepareAsyncBroadcast(::grpc::ClientContext* context, const ::flashreduce_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::BroadcastResponse>>(PrepareAsyncBroadcastRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Barrier(::grpc::ClientContext* context, const ::flashreduce_proto::BarrierRequest* request, ::flashreduce_proto::BarrierResponse* response, std::function<void(::grpc::Status)>) override;
      void Barrier(::grpc::ClientContext* context, const ::flashreduce_proto::BarrierRequest* request, ::flashreduce_proto::BarrierResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Broadcast(::grpc::ClientContext* context, const ::flashreduce_proto::BroadcastRequest* request, ::flashreduce_proto::BroadcastResponse* response, std::function<void(::grpc::Status)>) override;
      void Broadcast(::grpc::ClientContext* context, const ::flashreduce_proto::BroadcastRequest* request, ::flashreduce_proto::BroadcastResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::BarrierResponse>* AsyncBarrierRaw(::grpc::ClientContext* context, const ::flashreduce_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::BarrierResponse>* PrepareAsyncBarrierRaw(::grpc::ClientContext* context, const ::flashreduce_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::BroadcastResponse>* AsyncBroadcastRaw(::grpc::ClientContext* context, const ::flashreduce_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flashreduce_proto::BroadcastResponse>* PrepareAsyncBroadcastRaw(::grpc::ClientContext* context, const ::flashreduce_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Barrier_;
    const ::grpc::internal::RpcMethod rpcmethod_Broadcast_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Barrier(::grpc::ServerContext* context, const ::flashreduce_proto::BarrierRequest* request, ::flashreduce_proto::BarrierResponse* response);
    virtual ::grpc::Status Broadcast(::grpc::ServerContext* context, const ::flashreduce_proto::BroadcastRequest* request, ::flashreduce_proto::BroadcastResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Barrier() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::BarrierRequest* /*request*/, ::flashreduce_proto::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBarrier(::grpc::ServerContext* context, ::flashreduce_proto::BarrierRequest* request, ::grpc::ServerAsyncResponseWriter< ::flashreduce_proto::BarrierResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Broadcast() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::BroadcastRequest* /*request*/, ::flashreduce_proto::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcast(::grpc::ServerContext* context, ::flashreduce_proto::BroadcastRequest* request, ::grpc::ServerAsyncResponseWriter< ::flashreduce_proto::BroadcastResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Barrier<WithAsyncMethod_Broadcast<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Barrier() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::flashreduce_proto::BarrierRequest, ::flashreduce_proto::BarrierResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flashreduce_proto::BarrierRequest* request, ::flashreduce_proto::BarrierResponse* response) { return this->Barrier(context, request, response); }));}
    void SetMessageAllocatorFor_Barrier(
        ::grpc::MessageAllocator< ::flashreduce_proto::BarrierRequest, ::flashreduce_proto::BarrierResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flashreduce_proto::BarrierRequest, ::flashreduce_proto::BarrierResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::BarrierRequest* /*request*/, ::flashreduce_proto::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Barrier(
      ::grpc::CallbackServerContext* /*context*/, const ::flashreduce_proto::BarrierRequest* /*request*/, ::flashreduce_proto::BarrierResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Broadcast() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::flashreduce_proto::BroadcastRequest, ::flashreduce_proto::BroadcastResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flashreduce_proto::BroadcastRequest* request, ::flashreduce_proto::BroadcastResponse* response) { return this->Broadcast(context, request, response); }));}
    void SetMessageAllocatorFor_Broadcast(
        ::grpc::MessageAllocator< ::flashreduce_proto::BroadcastRequest, ::flashreduce_proto::BroadcastResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flashreduce_proto::BroadcastRequest, ::flashreduce_proto::BroadcastResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::BroadcastRequest* /*request*/, ::flashreduce_proto::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Broadcast(
      ::grpc::CallbackServerContext* /*context*/, const ::flashreduce_proto::BroadcastRequest* /*request*/, ::flashreduce_proto::BroadcastResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Barrier<WithCallbackMethod_Broadcast<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Barrier() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::BarrierRequest* /*request*/, ::flashreduce_proto::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Broadcast() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::BroadcastRequest* /*request*/, ::flashreduce_proto::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Barrier() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::BarrierRequest* /*request*/, ::flashreduce_proto::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBarrier(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Broadcast() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::BroadcastRequest* /*request*/, ::flashreduce_proto::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcast(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Barrier() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Barrier(context, request, response); }));
    }
    ~WithRawCallbackMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::BarrierRequest* /*request*/, ::flashreduce_proto::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Barrier(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Broadcast() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Broadcast(context, request, response); }));
    }
    ~WithRawCallbackMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::BroadcastRequest* /*request*/, ::flashreduce_proto::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Broadcast(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Barrier() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::flashreduce_proto::BarrierRequest, ::flashreduce_proto::BarrierResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::flashreduce_proto::BarrierRequest, ::flashreduce_proto::BarrierResponse>* streamer) {
                       return this->StreamedBarrier(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::BarrierRequest* /*request*/, ::flashreduce_proto::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBarrier(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flashreduce_proto::BarrierRequest,::flashreduce_proto::BarrierResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Broadcast() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::flashreduce_proto::BroadcastRequest, ::flashreduce_proto::BroadcastResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::flashreduce_proto::BroadcastRequest, ::flashreduce_proto::BroadcastResponse>* streamer) {
                       return this->StreamedBroadcast(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::flashreduce_proto::BroadcastRequest* /*request*/, ::flashreduce_proto::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBroadcast(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flashreduce_proto::BroadcastRequest,::flashreduce_proto::BroadcastResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Barrier<WithStreamedUnaryMethod_Broadcast<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Barrier<WithStreamedUnaryMethod_Broadcast<Service > > StreamedService;
};

}  // namespace flashreduce_proto


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_flashreduce_2eproto__INCLUDED
