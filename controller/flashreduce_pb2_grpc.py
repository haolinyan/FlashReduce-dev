# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import flashreduce_pb2 as flashreduce__pb2


class SessionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RdmaSession = channel.unary_unary(
                '/flashreduce_proto.Session/RdmaSession',
                request_serializer=flashreduce__pb2.RdmaSessionRequest.SerializeToString,
                response_deserializer=flashreduce__pb2.RdmaSessionResponse.FromString,
                _registered_method=True)


class SessionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RdmaSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SessionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RdmaSession': grpc.unary_unary_rpc_method_handler(
                    servicer.RdmaSession,
                    request_deserializer=flashreduce__pb2.RdmaSessionRequest.FromString,
                    response_serializer=flashreduce__pb2.RdmaSessionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flashreduce_proto.Session', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('flashreduce_proto.Session', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Session(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RdmaSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/flashreduce_proto.Session/RdmaSession',
            flashreduce__pb2.RdmaSessionRequest.SerializeToString,
            flashreduce__pb2.RdmaSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SyncStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Barrier = channel.unary_unary(
                '/flashreduce_proto.Sync/Barrier',
                request_serializer=flashreduce__pb2.BarrierRequest.SerializeToString,
                response_deserializer=flashreduce__pb2.BarrierResponse.FromString,
                _registered_method=True)
        self.Broadcast = channel.unary_unary(
                '/flashreduce_proto.Sync/Broadcast',
                request_serializer=flashreduce__pb2.BroadcastRequest.SerializeToString,
                response_deserializer=flashreduce__pb2.BroadcastResponse.FromString,
                _registered_method=True)


class SyncServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Barrier(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Broadcast(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SyncServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Barrier': grpc.unary_unary_rpc_method_handler(
                    servicer.Barrier,
                    request_deserializer=flashreduce__pb2.BarrierRequest.FromString,
                    response_serializer=flashreduce__pb2.BarrierResponse.SerializeToString,
            ),
            'Broadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.Broadcast,
                    request_deserializer=flashreduce__pb2.BroadcastRequest.FromString,
                    response_serializer=flashreduce__pb2.BroadcastResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flashreduce_proto.Sync', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('flashreduce_proto.Sync', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Sync(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Barrier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/flashreduce_proto.Sync/Barrier',
            flashreduce__pb2.BarrierRequest.SerializeToString,
            flashreduce__pb2.BarrierResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Broadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/flashreduce_proto.Sync/Broadcast',
            flashreduce__pb2.BroadcastRequest.SerializeToString,
            flashreduce__pb2.BroadcastResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
